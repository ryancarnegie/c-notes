#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void useLocal(void);
void useStaticLocal(void);
void useGlobal(void);

int x = 1;

int main(void) {	
	useLocal();
	useStaticLocal();
	useStaticLocal();
	useGlobal();
	useGlobal();

	int x = 5;

	printf("\nLocal in main is %d\n", x);
	return 0;
}

void useLocal(void) {
	int x = 25;
	printf("\nLocal x in useLocal is %d after entering useLocal\n", x);
	++x;
	printf("\nLocal x in useLocal is %d before exiting useLocal\n", x);
}

void useStaticLocal(void) {
	static int x = 50;
	printf("\nLocal x in useLocal is %d after entering useStaticLocal\n", x);
	++x;
	printf("\nLocal x in useLocal is %d before exiting useStaticLocal\n", x);
}

void useGlobal(void) {
	printf("\nGlobal x is %d after entering useGlobal\n", x);
	x *= 10;
	printf("\nGlobal x is %d before exiting useGlobal\n", x);
}

-------------------------------------
Static Array Init

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void staticArrayInit(void);

int main(void) {
	staticArrayInit();
	return 0;
}

void staticArrayInit(void) {
	static int array1[3] = { 1, 2, 3 };

	puts("\nValues on entering staticArrayInit: ");
	for (size_t i = 0; i <= 2; ++i) {
		printf("array[%zu] = %d ", i, array1[i]);
	}
	puts("\nValues on exiting staticArrayInit: ");

	for (size_t i = 0; i <= 2; ++i) {
		printf("array[%zu] = %d ", i, array1[i] += 5);
	}
}

Output:

Values on entering staticArrayInit:
array[0] = 1 array[1] = 2 array[2] = 3
Values on exiting staticArrayInit:
array[0] = 6 array[1] = 7 array[2] = 8
