char and integer are compatible. All characters are an integer value of 0 to 128 for the normal ascii character values as an unsigned integer.

size_t represents an unsigned integral type recommended for variables representing an array's size or subscripts
size_t is defined in header <stddef.h>
size_t is converted with specificion %zu

char c one spot in memory - add 3 characters into that and it does out of bounds. 
getchar() returns 1 character. 
int s = 13; // type 13 things
int x;
while (s--) {
  x = getchar(x);
putchar(x);
}

getchar() gives back the ASCII code of the character that it returned. it returns 1 integer. 
However, if multiple characters are pressed, it will stack them up until the end of file, which is character ascii value 10. 
Return -1 in C means it didn't find anything, therefore a bad character.

Double quotes for string literals. Single quotes for single character.
int n[SIZE] = { 12, 15, 11, 7, 16 };
printf("%s%13s%17s\n", "Element", "Value", "Bar Chart\n");
for (size_t i = 0; i < SIZE; i++) { // size_t for the array.
	printf("%7zu%13d%8s", i, n[i], "");
	for (int j = 1; j <= n[i]; ++j) {
		printf("%c", '*');
	}
}

----------------
Random in C
scale	shift 	1-6
rand()%6 // rand modulus 6 add one
rand()%6 + 1
0 <------> 5
v	   v
1 <------> 6
for (int i = 5; i <= 5; i++) {
	printf("%d ", 1 + (rand() % 6)); // output 6 6 5 5 6 every time
} 
// having the same output can be a good thing for debugging.
We get the same results every time we run it because we are running the exact same code.
Even though this rand is supposed to be generating random values, and to some degree it
does, it's generating the _same_ random values every time. 


Function Pointers
-----------------

int sum(int x, int y) {
  return x + y;
}

int prod(int x, int y) {
  return x * y;
}

void shoudNotBeChanged(int (*operation)(int, int)) {
  srand(time(NULL));
  int a = rand() % 100;
  int b = rand() % 100;
  printf("Result between %d and %d is %d\n", a, b, operation(a, b));
}

int main() {
  shouldNotBeChanged(*sum);
}
-----------------






